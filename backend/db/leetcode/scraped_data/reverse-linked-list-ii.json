{
  "content": "<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], left = 2, right = 4\n<strong>Output:</strong> [1,4,3,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [5], left = 1, right = 1\n<strong>Output:</strong> [5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>-500 &lt;= Node.val &lt;= 500</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in one pass?",
  "difficulty": "Medium",
  "title": "Reverse Linked List II",
  "topicTags": [
    {
      "name": "Linked List"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestReverseLinkedListII(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def create_linked_list(self, arr):\n        if not arr:\n            return None\n        head = ListNode(arr[0])\n        current = head\n        for val in arr[1:]:\n            current.next = ListNode(val)\n            current = current.next\n        return head\n\n    def linked_list_to_array(self, head):\n        result = []\n        current = head\n        while current:\n            result.append(current.val)\n            current = current.next\n        return result\n\n    def test_example_1(self):\n        head = self.create_linked_list([1,2,3,4,5])\n        left, right = 2, 4\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [1,4,3,2,5])\n\n    def test_example_2(self):\n        head = self.create_linked_list([5])\n        left, right = 1, 1\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [5])\n\n    def test_reverse_entire_list(self):\n        head = self.create_linked_list([1,2,3,4,5])\n        left, right = 1, 5\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [5,4,3,2,1])\n\n    def test_reverse_at_start(self):\n        head = self.create_linked_list([1,2,3,4,5])\n        left, right = 1, 3\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [3,2,1,4,5])\n\n    def test_reverse_at_end(self):\n        head = self.create_linked_list([1,2,3,4,5])\n        left, right = 3, 5\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [1,2,5,4,3])\n\n    def test_no_reverse(self):\n        head = self.create_linked_list([1,2,3])\n        left, right = 2, 2\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [1,2,3])\n\n    def test_two_nodes(self):\n        head = self.create_linked_list([1,2])\n        left, right = 1, 2\n        result = self.solution.reverseBetween(head, left, right)\n        self.assertEqual(self.linked_list_to_array(result), [2,1])\n\n    def test_long_list(self):\n        head = self.create_linked_list(list(range(1, 11)))\n        left, right = 3, 7\n        result = self.solution.reverseBetween(head, left, right)\n        expected = [1,2,7,6,5,4,3,8,9,10]\n        self.assertEqual(self.linked_list_to_array(result), expected)\n\nif __name__ == '__main__':\n    unittest.main()"
}
