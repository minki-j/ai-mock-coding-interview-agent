{
  "content": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "3Sum",
  "topicTags": [
    {
      "name": "Array"
    },
    {
      "name": "Two Pointers"
    },
    {
      "name": "Sorting"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass Test3Sum(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        nums = [-1, 0, 1, 2, -1, -4]\n        result = self.solution.threeSum(nums)\n        expected = [[-1, -1, 2], [-1, 0, 1]]\n        self.assertEqual(sorted([sorted(x) for x in result]), sorted([sorted(x) for x in expected]))\n\n    def test_example_2(self):\n        nums = [0, 1, 1]\n        result = self.solution.threeSum(nums)\n        self.assertEqual(result, [])\n\n    def test_example_3(self):\n        nums = [0, 0, 0]\n        result = self.solution.threeSum(nums)\n        self.assertEqual(result, [[0, 0, 0]])\n\n    def test_no_solution(self):\n        nums = [1, 2, 3, 4, 5]\n        result = self.solution.threeSum(nums)\n        self.assertEqual(result, [])\n\n    def test_multiple_solutions(self):\n        nums = [-2, -1, 0, 1, 2, 3, -3]\n        result = self.solution.threeSum(nums)\n        expected = [[-3, 0, 3], [-2, -1, 3], [-2, 0, 2], [-1, 0, 1]]\n        self.assertEqual(sorted([sorted(x) for x in result]), sorted([sorted(x) for x in expected]))\n\n    def test_duplicate_numbers(self):\n        nums = [-1, -1, -1, 0, 0, 0, 1, 1, 1]\n        result = self.solution.threeSum(nums)\n        expected = [[-1, 0, 1], [0, 0, 0]]\n        self.assertEqual(sorted([sorted(x) for x in result]), sorted([sorted(x) for x in expected]))\n\n    def test_minimum_length(self):\n        nums = [1, 2, -3]\n        result = self.solution.threeSum(nums)\n        self.assertEqual(result, [[1, 2, -3]] if sum(nums) == 0 else [])\n\n    def test_all_negative(self):\n        nums = [-1, -2, -3, -4, -5]\n        result = self.solution.threeSum(nums)\n        self.assertEqual(result, [])\n\n    def test_all_positive(self):\n        nums = [1, 2, 3, 4, 5]\n        result = self.solution.threeSum(nums)\n        self.assertEqual(result, [])\n\n    def test_large_numbers(self):\n        nums = [-100000, 50000, 50000, -50000, 0, 100000]\n        result = self.solution.threeSum(nums)\n        expected = [[-100000, 0, 100000], [-50000, 0, 50000]]\n        self.assertEqual(sorted([sorted(x) for x in result]), sorted([sorted(x) for x in expected]))\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
