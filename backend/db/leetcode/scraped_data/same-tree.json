{
  "content": "<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>\n\n<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,3], q = [1,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg\" style=\"width: 382px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2], q = [1,null,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,1], q = [1,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "difficulty": "Easy",
  "title": "Same Tree",
  "topicTags": [
    {
      "name": "Tree"
    },
    {
      "name": "Depth-First Search"
    },
    {
      "name": "Breadth-First Search"
    },
    {
      "name": "Binary Tree"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestSameTree(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        # [1,2,3]\n        p = TreeNode(1)\n        p.left = TreeNode(2)\n        p.right = TreeNode(3)\n        \n        q = TreeNode(1)\n        q.left = TreeNode(2)\n        q.right = TreeNode(3)\n        \n        result = self.solution.isSameTree(p, q)\n        self.assertTrue(result)\n\n    def test_example_2(self):\n        # [1,2], [1,null,2]\n        p = TreeNode(1)\n        p.left = TreeNode(2)\n        \n        q = TreeNode(1)\n        q.right = TreeNode(2)\n        \n        result = self.solution.isSameTree(p, q)\n        self.assertFalse(result)\n\n    def test_example_3(self):\n        # [1,2,1], [1,1,2]\n        p = TreeNode(1)\n        p.left = TreeNode(2)\n        p.right = TreeNode(1)\n        \n        q = TreeNode(1)\n        q.left = TreeNode(1)\n        q.right = TreeNode(2)\n        \n        result = self.solution.isSameTree(p, q)\n        self.assertFalse(result)\n\n    def test_empty_trees(self):\n        p = None\n        q = None\n        result = self.solution.isSameTree(p, q)\n        self.assertTrue(result)\n\n    def test_one_empty_tree(self):\n        p = TreeNode(1)\n        q = None\n        result = self.solution.isSameTree(p, q)\n        self.assertFalse(result)\n\n    def test_single_node(self):\n        p = TreeNode(1)\n        q = TreeNode(1)\n        result = self.solution.isSameTree(p, q)\n        self.assertTrue(result)\n\n    def test_different_values(self):\n        p = TreeNode(1)\n        q = TreeNode(2)\n        result = self.solution.isSameTree(p, q)\n        self.assertFalse(result)\n\n    def test_complex_tree(self):\n        # [1,2,3,4,5,6,7]\n        p = TreeNode(1)\n        p.left = TreeNode(2)\n        p.right = TreeNode(3)\n        p.left.left = TreeNode(4)\n        p.left.right = TreeNode(5)\n        p.right.left = TreeNode(6)\n        p.right.right = TreeNode(7)\n        \n        q = TreeNode(1)\n        q.left = TreeNode(2)\n        q.right = TreeNode(3)\n        q.left.left = TreeNode(4)\n        q.left.right = TreeNode(5)\n        q.right.left = TreeNode(6)\n        q.right.right = TreeNode(7)\n        \n        result = self.solution.isSameTree(p, q)\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main()"
}
