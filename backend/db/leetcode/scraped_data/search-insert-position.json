{
  "content": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 5\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "difficulty": "Easy",
  "title": "Search Insert Position",
  "topicTags": [
    {
      "name": "Array"
    },
    {
      "name": "Binary Search"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestSearchInsertPosition(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        nums = [1,3,5,6]\n        target = 5\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 2)\n\n    def test_example_2(self):\n        nums = [1,3,5,6]\n        target = 2\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 1)\n\n    def test_example_3(self):\n        nums = [1,3,5,6]\n        target = 7\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 4)\n\n    def test_empty_array(self):\n        nums = []\n        target = 1\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 0)\n\n    def test_single_element(self):\n        nums = [1]\n        target = 0\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 0)\n\n    def test_all_same_elements(self):\n        nums = [3,3,3,3]\n        target = 3\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 0)\n\n    def test_insert_beginning(self):\n        nums = [2,3,4,5]\n        target = 1\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 0)\n\n    def test_insert_end(self):\n        nums = [1,3,5,7]\n        target = 8\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 4)\n\n    def test_large_array(self):\n        nums = list(range(0, 10000, 2))  # Even numbers from 0 to 9998\n        target = 5001\n        result = self.solution.searchInsert(nums, target)\n        self.assertEqual(result, 2501)\n\nif __name__ == '__main__':\n    unittest.main()"
}
