{
  "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li>\n\t<li><code>n</code> is an integer.</li>\n\t<li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Pow(x, n)",
  "topicTags": [
    {
      "name": "Math"
    },
    {
      "name": "Recursion"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestPowXN(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        self.assertAlmostEqual(self.solution.myPow(2.0, 10), 1024.0)\n\n    def test_example_2(self):\n        self.assertAlmostEqual(self.solution.myPow(2.1, 3), 9.261)\n\n    def test_example_3(self):\n        self.assertAlmostEqual(self.solution.myPow(2.0, -2), 0.25)\n\n    def test_zero_power(self):\n        self.assertAlmostEqual(self.solution.myPow(2.0, 0), 1.0)\n        self.assertAlmostEqual(self.solution.myPow(-2.0, 0), 1.0)\n\n    def test_one_power(self):\n        self.assertAlmostEqual(self.solution.myPow(2.0, 1), 2.0)\n        self.assertAlmostEqual(self.solution.myPow(-2.0, 1), -2.0)\n\n    def test_negative_power(self):\n        self.assertAlmostEqual(self.solution.myPow(2.0, -3), 0.125)\n        self.assertAlmostEqual(self.solution.myPow(-2.0, -3), -0.125)\n\n    def test_large_power(self):\n        self.assertAlmostEqual(self.solution.myPow(1.0001, 10000), 2.716923932235896)\n\n    def test_negative_base(self):\n        self.assertAlmostEqual(self.solution.myPow(-2.0, 2), 4.0)\n        self.assertAlmostEqual(self.solution.myPow(-2.0, 3), -8.0)\n\n    def test_edge_cases(self):\n        self.assertAlmostEqual(self.solution.myPow(1.0, 2147483647), 1.0)\n        self.assertAlmostEqual(self.solution.myPow(1.0, -2147483648), 1.0)\n\nif __name__ == '__main__':\n    unittest.main()"
}
