{
  "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is an ascending array that is possibly rotated.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Search in Rotated Sorted Array",
  "topicTags": [
    {
      "name": "Array"
    },
    {
      "name": "Binary Search"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestSearchInRotatedSortedArray(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        nums = [4,5,6,7,0,1,2]\n        target = 0\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 4)\n\n    def test_example_2(self):\n        nums = [4,5,6,7,0,1,2]\n        target = 3\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, -1)\n\n    def test_example_3(self):\n        nums = [1]\n        target = 0\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, -1)\n\n    def test_no_rotation(self):\n        nums = [1,2,3,4,5]\n        target = 3\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 2)\n\n    def test_full_rotation(self):\n        nums = [1,2,3,4,5]\n        nums = nums[-1:] + nums[:-1]\n        target = 1\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 1)\n\n    def test_target_at_start(self):\n        nums = [5,1,2,3,4]\n        target = 5\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 0)\n\n    def test_target_at_end(self):\n        nums = [3,4,5,1,2]\n        target = 2\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 4)\n\n    def test_empty_array(self):\n        nums = []\n        target = 5\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, -1)\n\n    def test_large_array(self):\n        nums = list(range(1000, 2000)) + list(range(0, 1000))\n        target = 500\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 1500)\n\n    def test_pivot_at_middle(self):\n        nums = [6,7,8,1,2,3,4,5]\n        target = 6\n        result = self.solution.search(nums, target)\n        self.assertEqual(result, 0)\n\nif __name__ == '__main__':\n    unittest.main()"
}
