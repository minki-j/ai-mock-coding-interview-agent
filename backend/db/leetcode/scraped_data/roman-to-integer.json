{
  "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two ones added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n",
  "difficulty": "Easy",
  "title": "Roman to Integer",
  "topicTags": [
    {
      "name": "Hash Table"
    },
    {
      "name": "Math"
    },
    {
      "name": "String"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestRomanToInteger(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        s = \"III\"\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 3)\n\n    def test_example_2(self):\n        s = \"LVIII\"\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 58)\n\n    def test_example_3(self):\n        s = \"MCMXCIV\"\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 1994)\n\n    def test_single_numeral(self):\n        s = \"V\"\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 5)\n\n    def test_subtraction_cases(self):\n        test_cases = {\n            \"IV\": 4,\n            \"IX\": 9,\n            \"XL\": 40,\n            \"XC\": 90,\n            \"CD\": 400,\n            \"CM\": 900\n        }\n        for roman, expected in test_cases.items():\n            result = self.solution.romanToInt(roman)\n            self.assertEqual(result, expected)\n\n    def test_repeated_numerals(self):\n        s = \"XXXIII\"\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 33)\n\n    def test_maximum_value(self):\n        s = \"MMMCMXCIX\"  # 3999\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 3999)\n\n    def test_minimum_value(self):\n        s = \"I\"\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 1)\n\n    def test_complex_number(self):\n        s = \"MDCLXVI\"  # 1666\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 1666)\n\n    def test_descending_order(self):\n        s = \"MDC\"  # 1600\n        result = self.solution.romanToInt(s)\n        self.assertEqual(result, 1600)\n\nif __name__ == '__main__':\n    unittest.main()"
}
