{
  "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.​​​​</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
  "difficulty": "Hard",
  "title": "Regular Expression Matching",
  "topicTags": [
    {
      "name": "String"
    },
    {
      "name": "Dynamic Programming"
    },
    {
      "name": "Recursion"
    }
  ],
  "solution": {
    "content": "[TOC]\n\n## Solution\n\n---\n### Approach 1: Recursion\n\n**Intuition**\n\nIf there were no Kleene stars (the `*` wildcard character for regular expressions), the problem would be easier - we simply check from left to right if each character of the text matches the pattern.\n\nWhen a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern.  A recursive solution is a straightforward way to represent this relationship.\n\n**Algorithm**\n\nWithout a Kleene star, our solution would look like this:\n\n\n<iframe src=\"https://leetcode.com/playground/WHCkKfaZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"WHCkKfaZ\"></iframe>\n\nIf a star is present in the pattern, it will be in the second position $$\\text{pattern[1]}$$.  Then, we may ignore this part of the pattern, or delete a matching character in the text.  If we have a match on the remaining strings after any of these operations, then the initial inputs matched.\n\n<iframe src=\"https://leetcode.com/playground/QZA8SsdJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"QZA8SsdJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  In the worst case, a call to `match(text[i:], pattern[2j:])` will be made $$\\binom{i+j}{i}$$ times, and strings of the order $$O(T - i)$$ and $$O(P - 2*j)$$ will be made.  Thus, the complexity has the order $$\\sum_{i = 0}^T \\sum_{j = 0}^{P/2} \\binom{i+j}{i} O(T+P-i-2j)$$.  With some effort outside the scope of this article, we can show this is bounded by $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$.\n\n* Space Complexity:  For every call to `match`, we will create those strings as described above, possibly creating duplicates.  If memory is not freed, this will also take a total of $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$ space, even though there are only order $$O(T^2 + P^2)$$ unique suffixes of $$P$$ and  $$T$$ that are actually required.\n<br />\n<br />\n\n---\n\n### Approach 2: Dynamic Programming\n\n**Intuition**\n\nAs the problem has an **optimal substructure**, it is natural to cache intermediate results.  We ask the question $$\\text{dp(i, j)}$$: does $$\\text{text[i:]}$$ and $$\\text{pattern[j:]}$$ match?  We can describe our answer in terms of answers to questions involving smaller strings.\n\n**Algorithm**\n\nWe proceed with the same recursion as in [Approach 1](#approach-1-recursion), except because calls will only ever be made to `match(text[i:], pattern[j:])`, we use $$\\text{dp(i, j)}$$ to handle those calls instead, saving us expensive string-building operations and allowing us to cache the intermediate results.\n\n\n*Top-Down Variation*\n<iframe src=\"https://leetcode.com/playground/cXs5KPLc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cXs5KPLc\"></iframe>\n\n*Bottom-Up Variation*\n\n<iframe src=\"https://leetcode.com/playground/GnSNNEQb/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"GnSNNEQb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  The work for every call to `dp(i, j)` for $$i=0, ... ,T$$; $$j=0, ... ,P$$ is done once, and it is $$O(1)$$ work.  Hence, the time complexity is $$O(TP)$$.\n\n* Space Complexity:  The only memory we use is the $$O(TP)$$ boolean entries in our cache.  Hence, the space complexity is $$O(TP)$$."
  },
  "test_cases": "import unittest\n\nclass TestRegularExpressionMatching(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        s = \"aa\"\n        p = \"a\"\n        result = self.solution.isMatch(s, p)\n        self.assertFalse(result)\n\n    def test_example_2(self):\n        s = \"aa\"\n        p = \"a*\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_example_3(self):\n        s = \"ab\"\n        p = \".*\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_empty_strings(self):\n        s = \"\"\n        p = \"\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_star_pattern(self):\n        s = \"aaa\"\n        p = \"a*a\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_complex_pattern(self):\n        s = \"mississippi\"\n        p = \"mis*is*p*.\"\n        result = self.solution.isMatch(s, p)\n        self.assertFalse(result)\n\n    def test_dot_star_pattern(self):\n        s = \"aab\"\n        p = \"c*a*b\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_multiple_stars(self):\n        s = \"aaa\"\n        p = \"ab*a*c*a\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_empty_string_pattern(self):\n        s = \"\"\n        p = \"a*\"\n        result = self.solution.isMatch(s, p)\n        self.assertTrue(result)\n\n    def test_long_string(self):\n        s = \"aaaaaaaaaaaaab\"\n        p = \"a*a*a*a*a*a*a*a*a*a*c\"\n        result = self.solution.isMatch(s, p)\n        self.assertFalse(result)\n\nif __name__ == '__main__':\n    unittest.main()"
}
