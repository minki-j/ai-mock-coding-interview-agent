{
  "content": "<p>Given the <code>head</code> of a linked&nbsp;list, rotate the list to the right by <code>k</code> places.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" style=\"width: 450px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [4,5,1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" style=\"width: 305px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2], k = 4\n<strong>Output:</strong> [2,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Rotate List",
  "topicTags": [
    {
      "name": "Linked List"
    },
    {
      "name": "Two Pointers"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestRotateList(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def create_linked_list(self, arr):\n        if not arr:\n            return None\n        head = ListNode(arr[0])\n        current = head\n        for val in arr[1:]:\n            current.next = ListNode(val)\n            current = current.next\n        return head\n\n    def linked_list_to_array(self, head):\n        result = []\n        current = head\n        while current:\n            result.append(current.val)\n            current = current.next\n        return result\n\n    def test_example_1(self):\n        head = self.create_linked_list([1,2,3,4,5])\n        k = 2\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [4,5,1,2,3])\n\n    def test_example_2(self):\n        head = self.create_linked_list([0,1,2])\n        k = 4\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [2,0,1])\n\n    def test_empty_list(self):\n        head = None\n        k = 0\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [])\n\n    def test_single_node(self):\n        head = self.create_linked_list([1])\n        k = 1\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [1])\n\n    def test_zero_rotation(self):\n        head = self.create_linked_list([1,2,3])\n        k = 0\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [1,2,3])\n\n    def test_full_rotation(self):\n        head = self.create_linked_list([1,2,3])\n        k = 3\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [1,2,3])\n\n    def test_large_k(self):\n        head = self.create_linked_list([1,2,3,4,5])\n        k = 102\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [4,5,1,2,3])\n\n    def test_k_greater_than_length(self):\n        head = self.create_linked_list([1,2])\n        k = 5\n        result = self.solution.rotateRight(head, k)\n        self.assertEqual(self.linked_list_to_array(result), [2,1])\n\nif __name__ == '__main__':\n    unittest.main()"
}
