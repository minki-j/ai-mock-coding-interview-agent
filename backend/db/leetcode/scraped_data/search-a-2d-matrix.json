{
  "content": "<p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p>\n\n<ul>\n\t<li>Each row is sorted in non-decreasing order.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n\n<p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Search a 2D Matrix",
  "topicTags": [
    {
      "name": "Array"
    },
    {
      "name": "Binary Search"
    },
    {
      "name": "Matrix"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestSearchMatrix(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n        target = 3\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertTrue(result)\n\n    def test_example_2(self):\n        matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n        target = 13\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertFalse(result)\n\n    def test_single_row(self):\n        matrix = [[1,3,5,7]]\n        target = 5\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertTrue(result)\n\n    def test_single_column(self):\n        matrix = [[1],[3],[5],[7]]\n        target = 7\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertTrue(result)\n\n    def test_single_element(self):\n        matrix = [[1]]\n        target = 1\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertTrue(result)\n\n    def test_target_not_present(self):\n        matrix = [[1,3,5],[7,9,11],[13,15,17]]\n        target = 4\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertFalse(result)\n\n    def test_target_smaller_than_all(self):\n        matrix = [[1,3,5],[7,9,11]]\n        target = 0\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertFalse(result)\n\n    def test_target_larger_than_all(self):\n        matrix = [[1,3,5],[7,9,11]]\n        target = 12\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertFalse(result)\n\n    def test_large_matrix(self):\n        matrix = [[i + j*10 for i in range(1, 11)] for j in range(10)]\n        target = 55\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertTrue(result)\n\n    def test_empty_matrix(self):\n        matrix = []\n        target = 1\n        result = self.solution.searchMatrix(matrix, target)\n        self.assertFalse(result)\n\nif __name__ == '__main__':\n    unittest.main()"
}
