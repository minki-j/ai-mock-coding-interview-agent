{
  "content": "<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p>\n\n<p>Return <em>the sum of the three integers</em>.</p>\n\n<p>You may assume that each input would have exactly one solution.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,2,1,-4], target = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0], target = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "3Sum Closest",
  "topicTags": [
    {
      "name": "Array"
    },
    {
      "name": "Two Pointers"
    },
    {
      "name": "Sorting"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass Test3SumClosest(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        nums = [-1, 2, 1, -4]\n        target = 1\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 2)\n\n    def test_example_2(self):\n        nums = [0, 0, 0]\n        target = 1\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 0)\n\n    def test_negative_numbers(self):\n        nums = [-5, -3, -2, -1]\n        target = -8\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, -9)  # -5 + -3 + -1 = -9\n\n    def test_positive_numbers(self):\n        nums = [1, 2, 3, 4, 5]\n        target = 10\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 12)  # 3 + 4 + 5 = 12\n\n    def test_mixed_numbers(self):\n        nums = [-2, -1, 0, 1, 2]\n        target = 0\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 0)  # -1 + 0 + 1 = 0\n\n    def test_large_target(self):\n        nums = [1, 2, 4, 8, 16, 32]\n        target = 100\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 52)  # 4 + 16 + 32 = 52\n\n    def test_minimum_length(self):\n        nums = [1, 2, 3]\n        target = 6\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 6)  # 1 + 2 + 3 = 6\n\n    def test_duplicate_numbers(self):\n        nums = [2, 2, 2, 2]\n        target = 7\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 6)  # 2 + 2 + 2 = 6\n\n    def test_exact_match(self):\n        nums = [-1, 0, 1, 2]\n        target = 3\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 3)  # 0 + 1 + 2 = 3\n\n    def test_edge_case_values(self):\n        nums = [-1000, 0, 1000]\n        target = 100\n        result = self.solution.threeSumClosest(nums, target)\n        self.assertEqual(result, 0)  # -1000 + 0 + 1000 = 0\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
