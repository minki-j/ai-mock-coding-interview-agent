{
  "content": "<p>You are given the <code>root</code> of a binary search tree (BST), where the values of <strong>exactly</strong> two nodes of the tree were swapped by mistake. <em>Recover the tree without changing its structure</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,null,null,2]\n<strong>Output:</strong> [3,1,null,null,2]\n<strong>Explanation:</strong> 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" style=\"width: 581px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,null,2]\n<strong>Output:</strong> [2,1,4,null,null,3]\n<strong>Explanation:</strong> 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> A solution using <code>O(n)</code> space is pretty straight-forward. Could you devise a constant <code>O(1)</code> space solution?",
  "difficulty": "Medium",
  "title": "Recover Binary Search Tree",
  "topicTags": [
    {
      "name": "Tree"
    },
    {
      "name": "Depth-First Search"
    },
    {
      "name": "Binary Search Tree"
    },
    {
      "name": "Binary Tree"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestRecoverBinarySearchTree(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def create_tree(self, values):\n        if not values:\n            return None\n        root = TreeNode(values[0])\n        queue = [root]\n        i = 1\n        while queue and i < len(values):\n            node = queue.pop(0)\n            if i < len(values) and values[i] is not None:\n                node.left = TreeNode(values[i])\n                queue.append(node.left)\n            i += 1\n            if i < len(values) and values[i] is not None:\n                node.right = TreeNode(values[i])\n                queue.append(node.right)\n            i += 1\n        return root\n\n    def tree_to_list(self, root):\n        if not root:\n            return []\n        result = []\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node:\n                result.append(node.val)\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                result.append(None)\n        while result[-1] is None:\n            result.pop()\n        return result\n\n    def test_example_1(self):\n        root = self.create_tree([1,3,None,None,2])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [3,1,None,None,2])\n\n    def test_example_2(self):\n        root = self.create_tree([3,1,4,None,None,2])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [2,1,4,None,None,3])\n\n    def test_single_node(self):\n        root = self.create_tree([1])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [1])\n\n    def test_two_nodes(self):\n        root = self.create_tree([2,1])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [1,2])\n\n    def test_adjacent_nodes_swapped(self):\n        root = self.create_tree([1,3,2,4])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [1,2,3,4])\n\n    def test_non_adjacent_nodes_swapped(self):\n        root = self.create_tree([5,2,8,1,3,6,9,None,None,None,4,None,7])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [5,2,8,1,4,6,9,None,None,None,3,None,7])\n\n    def test_root_involved(self):\n        root = self.create_tree([3,1,2])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [2,1,3])\n\n    def test_leaf_nodes_swapped(self):\n        root = self.create_tree([5,3,7,2,4,6,8,1,9])\n        self.solution.recoverTree(root)\n        self.assertEqual(self.tree_to_list(root), [5,3,7,2,4,6,8,9,1])\n\nif __name__ == '__main__':\n    unittest.main()"
}
