{
  "content": "<p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>&#39;s.</p>\n\n<p>You must do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg\" style=\"width: 450px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg\" style=\"width: 450px; height: 137px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n<strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[0].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li>\n\t<li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li>\n\t<li>Could you devise a constant space solution?</li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Set Matrix Zeroes",
  "topicTags": [
    {
      "name": "Array"
    },
    {
      "name": "Hash Table"
    },
    {
      "name": "Matrix"
    }
  ],
  "solution": {
    "content": null
  },
  "test_cases": "import unittest\n\nclass TestSetMatrixZeroes(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_example_1(self):\n        matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        expected = [[1,0,1],[0,0,0],[1,0,1]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_example_2(self):\n        matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        expected = [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_single_element(self):\n        matrix = [[0]]\n        expected = [[0]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_no_zeroes(self):\n        matrix = [[1,2],[3,4]]\n        expected = [[1,2],[3,4]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_all_zeroes(self):\n        matrix = [[0,0],[0,0]]\n        expected = [[0,0],[0,0]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_single_row(self):\n        matrix = [[1,0,3]]\n        expected = [[0,0,0]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_single_column(self):\n        matrix = [[1],[0],[3]]\n        expected = [[0],[0],[0]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\n    def test_large_matrix(self):\n        matrix = [[1,2,3,4],[5,0,7,8],[9,10,11,12],[13,14,0,16]]\n        expected = [[1,0,0,4],[0,0,0,0],[9,0,0,12],[0,0,0,0]]\n        self.solution.setZeroes(matrix)\n        self.assertEqual(matrix, expected)\n\nif __name__ == '__main__':\n    unittest.main()"
}
