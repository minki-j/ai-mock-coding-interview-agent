{
    "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
    "difficulty": "Easy",
    "title": "Merge Sorted Array",
    "topicTags": [
        {
            "name": "Array"
        },
        {
            "name": "Two Pointers"
        },
        {
            "name": "Sorting"
        }
    ],
    "solution": {
        "content": null
    },
    "content_md": "You are given two integer arrays `nums1` and `nums2`, sorted in **non\\-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.\n\n\n**Merge** `nums1` and `nums2` into a single array sorted in **non\\-decreasing order**.\n\n\nThe final sorted array should not be returned by the function, but instead be *stored inside the array* `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n\n```\n\n**Example 3:**\n\n\n\n```\n\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `nums1.length == m + n`\n* `nums2.length == n`\n* `0 <= m, n <= 200`\n* `1 <= m + n <= 200`\n* `-109 <= nums1[i], nums2[j] <= 109`\n\n\n\u00a0\n\n\n**Follow up:** Can you come up with an algorithm that runs in `O(m + n)` time?\n\n\n",
    "solution_md": null,
    "prep_code": "from typing import List\n\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n",
    "test_code": "import unittest\nimport hypothesis.strategies as st\nfrom hypothesis import given\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        nums1 = [1, 2, 3, 0, 0, 0]\n        nums2 = [2, 5, 6]\n        solution.merge(nums1, len(nums1) - len(nums2), nums2, len(nums2))\n        self.assertEqual(nums1, [1, 2, 2, 3, 5, 6])\n\n    def test_2(self):\n        solution = Solution()\n        nums1 = [0]\n        nums2 = [1]\n        solution.merge(nums1, len(nums1) - len(nums2), nums2, len(nums2))\n        self.assertEqual(nums1, [1])\n\n    def test_3(self):\n        solution = Solution()\n        nums1 = [0, 0]\n        nums2 = [0, 1]\n        solution.merge(nums1, len(nums1) - len(nums2), nums2, len(nums2))\n        self.assertEqual(nums1, [0, 1])\n\n    def test_4(self):\n        solution = Solution()\n        nums1 = [1]\n        nums2 = []\n        solution.merge(nums1, len(nums1) - len(nums2), nums2, len(nums2))\n        self.assertEqual(nums1, [1])\n\n    @given(st.lists(st.integers()), st.lists(st.integers()))\n    def test_random(self, nums1, nums2):\n        solution = Solution()\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        nums1_sorted = sorted(nums1 + nums2)\n        nums1 += [0] * len(nums2)\n        solution.merge(nums1, len(nums1) - len(nums2), nums2, len(nums2))\n        self.assertEqual(nums1, nums1_sorted)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
}