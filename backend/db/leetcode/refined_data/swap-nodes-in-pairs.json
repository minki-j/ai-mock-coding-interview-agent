{
    "content": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head. You must solve the problem without&nbsp;modifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,1,4,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" style=\"width: 422px; height: 222px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = []</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = [1,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,1,3]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the&nbsp;list&nbsp;is in the range <code>[0, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
    "difficulty": "Medium",
    "title": "Swap Nodes in Pairs",
    "topicTags": [
        {
            "name": "Linked List"
        },
        {
            "name": "Recursion"
        }
    ],
    "solution": {
        "content": null
    },
    "content_md": "Given a\u00a0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\u00a0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n**Input:** head \\= \\[1,2,3,4]\n\n\n**Output:** \\[2,1,4,3]\n\n\n**Explanation:**\n\n\n![](https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg)\n\n\n\n**Example 2:**\n\n\n\n**Input:** head \\= \\[]\n\n\n**Output:** \\[]\n\n\n\n**Example 3:**\n\n\n\n**Input:** head \\= \\[1]\n\n\n**Output:** \\[1]\n\n\n\n**Example 4:**\n\n\n\n**Input:** head \\= \\[1,2,3]\n\n\n**Output:** \\[2,1,3]\n\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the\u00a0list\u00a0is in the range `[0, 100]`.\n* `0 <= Node.val <= 100`\n\n\n",
    "solution_md": null,
    "prep_code": "from utils.linked_list import ListNode\n\n\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n",
    "test_code": "import unittest\nimport copy\nimport hypothesis.strategies as st\nfrom hypothesis import given\nfrom utils.linked_list import make_linked_list, linked_list_to_list\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        values = [1, 2, 3, 4]\n        head = make_linked_list(values)\n        ori_head = copy.deepcopy(head)\n        solution = Solution()\n        swap_head = solution.swapPairs(head)\n        head = ori_head\n        self.assertEqual(head.val, swap_head.next.val)\n        self.assertEqual(head.next.val, swap_head.val)\n\n    def test_2(self):\n        values = [1, 2, 3]\n        head = make_linked_list(values)\n        ori_head = copy.deepcopy(head)\n        solution = Solution()\n        swap_head = solution.swapPairs(head)\n        head = ori_head\n        self.assertEqual(head.next.next.val, swap_head.next.next.val)\n\n    def test_3(self):\n        values = [1]\n        head = make_linked_list(values)\n        ori_head = copy.deepcopy(head)\n        solution = Solution()\n        swap_head = solution.swapPairs(head)\n        head = ori_head\n        self.assertEqual(head.val, swap_head.val)\n\n    @given(st.lists(st.integers()))\n    def test_random(self, values):\n        head = make_linked_list(values)\n        solution = Solution()\n        swap_head = solution.swapPairs(head)\n        swap_values = linked_list_to_list(swap_head)\n        for i in range(0, len(swap_values) - 1, 2):\n            swap_values[i], swap_values[i + 1] = (\n                swap_values[i + 1],\n                swap_values[i],\n            )\n        self.assertEqual(values, swap_values)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
}