{
  "content": "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Generate Parentheses",
  "topicTags": [
    {
      "name": "String"
    },
    {
      "name": "Dynamic Programming"
    },
    {
      "name": "Backtracking"
    }
  ],
  "solution": {
    "content": null
  },
  "content_md": "Given `n` pairs of parentheses, write a function to *generate all combinations of well\\-formed parentheses*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\n```\n**Example 2:**\n\n\n\n```\nInput: n = 1\nOutput: [\"()\"]\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 8`\n\n\n",
  "solution_md": null
}