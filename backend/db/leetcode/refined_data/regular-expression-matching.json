{
  "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.​​​​</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
  "difficulty": "Hard",
  "title": "Regular Expression Matching",
  "topicTags": [
    {
      "name": "String"
    },
    {
      "name": "Dynamic Programming"
    },
    {
      "name": "Recursion"
    }
  ],
  "solution": {
    "content": "[TOC]\n\n## Solution\n\n---\n### Approach 1: Recursion\n\n**Intuition**\n\nIf there were no Kleene stars (the `*` wildcard character for regular expressions), the problem would be easier - we simply check from left to right if each character of the text matches the pattern.\n\nWhen a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern.  A recursive solution is a straightforward way to represent this relationship.\n\n**Algorithm**\n\nWithout a Kleene star, our solution would look like this:\n\n\n<iframe src=\"\n```python3\ndef match(text, pattern):\n    if not pattern:\n        return not text\n    first_match = bool(text) and pattern[0] in {text[0], \".\"}\n    return first_match and match(text[1:], pattern[1:])\n```\n\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"WHCkKfaZ\"></iframe>\n\nIf a star is present in the pattern, it will be in the second position $$\\text{pattern[1]}$$.  Then, we may ignore this part of the pattern, or delete a matching character in the text.  If we have a match on the remaining strings after any of these operations, then the initial inputs matched.\n\n<iframe src=\"\n```python3\nclass Solution(object):\n    def isMatch(self, text: str, pattern: str) -> bool:\n        if not pattern:\n            return not text\n\n        first_match = bool(text) and pattern[0] in {text[0], \".\"}\n\n        if len(pattern) >= 2 and pattern[1] == \"*\":\n            return (\n                self.isMatch(text, pattern[2:])\n                or first_match\n                and self.isMatch(text[1:], pattern)\n            )\n        else:\n            return first_match and self.isMatch(text[1:], pattern[1:])\n```\n\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"QZA8SsdJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  In the worst case, a call to `match(text[i:], pattern[2j:])` will be made $$\\binom{i+j}{i}$$ times, and strings of the order $$O(T - i)$$ and $$O(P - 2*j)$$ will be made.  Thus, the complexity has the order $$\\sum_{i = 0}^T \\sum_{j = 0}^{P/2} \\binom{i+j}{i} O(T+P-i-2j)$$.  With some effort outside the scope of this article, we can show this is bounded by $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$.\n\n* Space Complexity:  For every call to `match`, we will create those strings as described above, possibly creating duplicates.  If memory is not freed, this will also take a total of $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$ space, even though there are only order $$O(T^2 + P^2)$$ unique suffixes of $$P$$ and  $$T$$ that are actually required.\n<br />\n<br />\n\n---\n\n### Approach 2: Dynamic Programming\n\n**Intuition**\n\nAs the problem has an **optimal substructure**, it is natural to cache intermediate results.  We ask the question $$\\text{dp(i, j)}$$: does $$\\text{text[i:]}$$ and $$\\text{pattern[j:]}$$ match?  We can describe our answer in terms of answers to questions involving smaller strings.\n\n**Algorithm**\n\nWe proceed with the same recursion as in [Approach 1](#approach-1-recursion), except because calls will only ever be made to `match(text[i:], pattern[j:])`, we use $$\\text{dp(i, j)}$$ to handle those calls instead, saving us expensive string-building operations and allowing us to cache the intermediate results.\n\n\n*Top-Down Variation*\n<iframe src=\"\n```python3\nclass Solution(object):\n    def isMatch(self, text: str, pattern: str) -> bool:\n        memo = {}\n\n        def dp(i: int, j: int) -> bool:\n            if (i, j) not in memo:\n                if j == len(pattern):\n                    ans = i == len(text)\n                else:\n                    first_match = i < len(text) and pattern[j] in {text[i], \".\"}\n                    if j + 1 < len(pattern) and pattern[j + 1] == \"*\":\n                        ans = dp(i, j + 2) or first_match and dp(i + 1, j)\n                    else:\n                        ans = first_match and dp(i + 1, j + 1)\n\n                memo[i, j] = ans\n            return memo[i, j]\n\n        return dp(0, 0)\n```\n\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cXs5KPLc\"></iframe>\n\n*Bottom-Up Variation*\n\n<iframe src=\"\n```python3\nclass Solution(object):\n    def isMatch(self, text: str, pattern: str) -> bool:\n        dp = [[False] * (len(pattern) + 1) for _ in range(len(text) + 1)]\n\n        dp[-1][-1] = True\n        for i in range(len(text), -1, -1):\n            for j in range(len(pattern) - 1, -1, -1):\n                first_match = i < len(text) and pattern[j] in {text[i], \".\"}\n                if j + 1 < len(pattern) and pattern[j + 1] == \"*\":\n                    dp[i][j] = dp[i][j + 2] or first_match and dp[i + 1][j]\n                else:\n                    dp[i][j] = first_match and dp[i + 1][j + 1]\n\n        return dp[0][0]\n```\n\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"GnSNNEQb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  The work for every call to `dp(i, j)` for $$i=0, ... ,T$$; $$j=0, ... ,P$$ is done once, and it is $$O(1)$$ work.  Hence, the time complexity is $$O(TP)$$.\n\n* Space Complexity:  The only memory we use is the $$O(TP)$$ boolean entries in our cache.  Hence, the space complexity is $$O(TP)$$."
  },
  "code_snippets": [
    {
      "url": "https://leetcode.com/playground/WHCkKfaZ/shared",
      "code": "def match(text, pattern):\n    if not pattern:\n        return not text\n    first_match = bool(text) and pattern[0] in {text[0], \".\"}\n    return first_match and match(text[1:], pattern[1:])",
      "langSlug": "python3"
    },
    {
      "url": "https://leetcode.com/playground/QZA8SsdJ/shared",
      "code": "class Solution(object):\n    def isMatch(self, text: str, pattern: str) -> bool:\n        if not pattern:\n            return not text\n\n        first_match = bool(text) and pattern[0] in {text[0], \".\"}\n\n        if len(pattern) >= 2 and pattern[1] == \"*\":\n            return (\n                self.isMatch(text, pattern[2:])\n                or first_match\n                and self.isMatch(text[1:], pattern)\n            )\n        else:\n            return first_match and self.isMatch(text[1:], pattern[1:])",
      "langSlug": "python3"
    },
    {
      "url": "https://leetcode.com/playground/cXs5KPLc/shared",
      "code": "class Solution(object):\n    def isMatch(self, text: str, pattern: str) -> bool:\n        memo = {}\n\n        def dp(i: int, j: int) -> bool:\n            if (i, j) not in memo:\n                if j == len(pattern):\n                    ans = i == len(text)\n                else:\n                    first_match = i < len(text) and pattern[j] in {text[i], \".\"}\n                    if j + 1 < len(pattern) and pattern[j + 1] == \"*\":\n                        ans = dp(i, j + 2) or first_match and dp(i + 1, j)\n                    else:\n                        ans = first_match and dp(i + 1, j + 1)\n\n                memo[i, j] = ans\n            return memo[i, j]\n\n        return dp(0, 0)",
      "langSlug": "python3"
    },
    {
      "url": "https://leetcode.com/playground/GnSNNEQb/shared",
      "code": "class Solution(object):\n    def isMatch(self, text: str, pattern: str) -> bool:\n        dp = [[False] * (len(pattern) + 1) for _ in range(len(text) + 1)]\n\n        dp[-1][-1] = True\n        for i in range(len(text), -1, -1):\n            for j in range(len(pattern) - 1, -1, -1):\n                first_match = i < len(text) and pattern[j] in {text[i], \".\"}\n                if j + 1 < len(pattern) and pattern[j + 1] == \"*\":\n                    dp[i][j] = dp[i][j + 2] or first_match and dp[i + 1][j]\n                else:\n                    dp[i][j] = first_match and dp[i + 1][j + 1]\n\n        return dp[0][0]",
      "langSlug": "python3"
    }
  ],
  "content_md": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n\n* `'.'` Matches any single character.​​​​\n* `'*'` Matches zero or more of the preceding element.\n\n\nThe matching should cover the **entire** input string (not partial).\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 20`\n* `1 <= p.length <= 20`\n* `s` contains only lowercase English letters.\n* `p` contains only lowercase English letters, `'.'`, and `'*'`.\n* It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.\n\n\n",
  "solution_md": "\\[TOC]\n\n\\#\\# Solution\n\n\\-\\-\\-\n\\#\\#\\# Approach 1: Recursion\n\n\\*\\*Intuition\\*\\*\n\nIf there were no Kleene stars (the \\`\\*\\` wildcard character for regular expressions), the problem would be easier \\- we simply check from left to right if each character of the text matches the pattern.\n\nWhen a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern. A recursive solution is a straightforward way to represent this relationship.\n\n\\*\\*Algorithm\\*\\*\n\nWithout a Kleene star, our solution would look like this:\n\n\n\n\nIf a star is present in the pattern, it will be in the second position $$\\\\text{pattern\\[1]}$$. Then, we may ignore this part of the pattern, or delete a matching character in the text. If we have a match on the remaining strings after any of these operations, then the initial inputs matched.\n\n\\= 2 and pattern\\[1] \\=\\= \"\\*\":\n return (\n self.isMatch(text, pattern\\[2:])\n or first\\_match\n and self.isMatch(text\\[1:], pattern)\n )\n else:\n return first\\_match and self.isMatch(text\\[1:], pattern\\[1:])\n\\`\\`\\`\n\" frameBorder\\=\"0\" width\\=\"100%\" height\\=\"395\" name\\=\"QZA8SsdJ\"\\>\n\n\\*\\*Complexity Analysis\\*\\*\n\n\\* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively. In the worst case, a call to \\`match(text\\[i:], pattern\\[2j:])\\` will be made $$\\\\binom{i\\+j}{i}$$ times, and strings of the order $$O(T \\- i)$$ and $$O(P \\- 2\\*j)$$ will be made. Thus, the complexity has the order $$\\\\sum\\_{i \\= 0}^T \\\\sum\\_{j \\= 0}^{P/2} \\\\binom{i\\+j}{i} O(T\\+P\\-i\\-2j)$$. With some effort outside the scope of this article, we can show this is bounded by $$O\\\\big((T\\+P)2^{T \\+ \\\\frac{P}{2}}\\\\big)$$.\n\n\\* Space Complexity: For every call to \\`match\\`, we will create those strings as described above, possibly creating duplicates. If memory is not freed, this will also take a total of $$O\\\\big((T\\+P)2^{T \\+ \\\\frac{P}{2}}\\\\big)$$ space, even though there are only order $$O(T^2 \\+ P^2\\)$$ unique suffixes of $$P$$ and $$T$$ that are actually required.\n  \n\n  \n\n\n\\-\\-\\-\n\n\\#\\#\\# Approach 2: Dynamic Programming\n\n\\*\\*Intuition\\*\\*\n\nAs the problem has an \\*\\*optimal substructure\\*\\*, it is natural to cache intermediate results. We ask the question $$\\\\text{dp(i, j)}$$: does $$\\\\text{text\\[i:]}$$ and $$\\\\text{pattern\\[j:]}$$ match? We can describe our answer in terms of answers to questions involving smaller strings.\n\n\\*\\*Algorithm\\*\\*\n\nWe proceed with the same recursion as in \\[Approach 1](\\#approach\\-1\\-recursion), except because calls will only ever be made to \\`match(text\\[i:], pattern\\[j:])\\`, we use $$\\\\text{dp(i, j)}$$ to handle those calls instead, saving us expensive string\\-building operations and allowing us to cache the intermediate results.\n\n\n\\*Top\\-Down Variation\\*\n\n\n\\*Bottom\\-Up Variation\\*\n\n\n\n\\*\\*Complexity Analysis\\*\\*\n\n\\* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively. The work for every call to \\`dp(i, j)\\` for $$i\\=0, ... ,T$$; $$j\\=0, ... ,P$$ is done once, and it is $$O(1\\)$$ work. Hence, the time complexity is $$O(TP)$$.\n\n\\* Space Complexity: The only memory we use is the $$O(TP)$$ boolean entries in our cache. Hence, the space complexity is $$O(TP)$$."
}