{
  "content": "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
  "difficulty": "Medium",
  "title": "Reverse Integer",
  "topicTags": [
    {
      "name": "Math"
    }
  ],
  "solution": {
    "content": "[TOC]\n\n## Video Solution\n---\n\n<div class='video-preview'></div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n### Approach 1: Pop and Push Digits & Check before Overflow\n\n**Intuition**\n\nWe can build up the reverse integer one digit at a time.\nWhile doing so, we can check beforehand whether or not appending another digit would cause overflow.\n\n**Algorithm**\n\nReversing an integer can be done similarly to reversing a string.\n\nWe want to repeatedly \"pop\" the last digit off of $$x$$ and \"push\" it to the back of the $$\\text{rev}$$. In the end, $$\\text{rev}$$ will be the reverse of the $$x$$.\n\nTo \"pop\" and \"push\" digits without the help of some auxiliary stack/array, we can use math.\n\n```cpp\n// pop operation:\npop = x % 10;\nx /= 10;\n\n// push operation:\ntemp = rev * 10 + pop;\nrev = temp;\n```\n\nHowever, this approach is dangerous, because the statement $$\\text{temp} = \\text{rev} \\cdot 10 + \\text{pop}$$ can cause overflow.\n\nLuckily, it is easy to check beforehand whether or this statement would cause an overflow.\n\nTo explain, lets assume that $$\\text{rev}$$ is positive.\n\n1. If $$temp = \\text{rev} \\cdot 10 + \\text{pop}$$ causes overflow, then it must be that $$\\text{rev} \\geq \\frac{INTMAX}{10}$$\n2. If $$\\text{rev} > \\frac{INTMAX}{10}$$, then $$temp = \\text{rev} \\cdot 10 + \\text{pop}$$ is guaranteed to overflow.\n3. If $$\\text{rev} == \\frac{INTMAX}{10}$$, then $$temp = \\text{rev} \\cdot 10 + \\text{pop}$$ will overflow if and only if $$\\text{pop} > 7$$\n\nSimilar logic can be applied when $$\\text{rev}$$ is negative.\n\n<iframe src=\"\n```python3\nclass Solution:\n    def reverse(self, x: int) -> int:\n        sign = [1, -1][x < 0]\n        rev, x = 0, abs(x)\n        while x:\n            x, mod = divmod(x, 10)\n            rev = rev * 10 + mod\n            if rev > 2**31 - 1:\n                return 0\n        return sign * rev\n```\n\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"fm5j6WLP\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(\\log(x))$$. There are roughly $$\\log_{10}(x)$$ digits in $$x$$.\n* Space Complexity: $$O(1)$$."
  },
  "code_snippets": [
    {
      "url": "https://leetcode.com/playground/fm5j6WLP/shared",
      "code": "class Solution:\n    def reverse(self, x: int) -> int:\n        sign = [1, -1][x < 0]\n        rev, x = 0, abs(x)\n        while x:\n            x, mod = divmod(x, 10)\n            rev = rev * 10 + mod\n            if rev > 2**31 - 1:\n                return 0\n        return sign * rev",
      "langSlug": "python3"
    }
  ],
  "content_md": "Given a signed 32\\-bit integer `x`, return `x` *with its digits reversed*. If reversing `x` causes the value to go outside the signed 32\\-bit integer range `[-231, 231 - 1]`, then return `0`.\n\n\n**Assume the environment does not allow you to store 64\\-bit integers (signed or unsigned).**\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\nInput: x = 123\nOutput: 321\n\n```\n\n**Example 2:**\n\n\n\n```\n\nInput: x = -123\nOutput: -321\n\n```\n\n**Example 3:**\n\n\n\n```\n\nInput: x = 120\nOutput: 21\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `-231 <= x <= 231 - 1`\n\n\n",
  "solution_md": "\\[TOC]\n\n\\#\\# Video Solution\n\\-\\-\\-\n\n\n \n\n\n\\#\\# Solution Article\n\n\\-\\-\\-\n\n\\#\\#\\# Approach 1: Pop and Push Digits \\& Check before Overflow\n\n\\*\\*Intuition\\*\\*\n\nWe can build up the reverse integer one digit at a time.\nWhile doing so, we can check beforehand whether or not appending another digit would cause overflow.\n\n\\*\\*Algorithm\\*\\*\n\nReversing an integer can be done similarly to reversing a string.\n\nWe want to repeatedly \"pop\" the last digit off of $$x$$ and \"push\" it to the back of the $$\\\\text{rev}$$. In the end, $$\\\\text{rev}$$ will be the reverse of the $$x$$.\n\nTo \"pop\" and \"push\" digits without the help of some auxiliary stack/array, we can use math.\n\n\\`\\`\\`cpp\n// pop operation:\npop \\= x % 10;\nx /\\= 10;\n\n// push operation:\ntemp \\= rev \\* 10 \\+ pop;\nrev \\= temp;\n\\`\\`\\`\n\nHowever, this approach is dangerous, because the statement $$\\\\text{temp} \\= \\\\text{rev} \\\\cdot 10 \\+ \\\\text{pop}$$ can cause overflow.\n\nLuckily, it is easy to check beforehand whether or this statement would cause an overflow.\n\nTo explain, lets assume that $$\\\\text{rev}$$ is positive.\n\n1\\. If $$temp \\= \\\\text{rev} \\\\cdot 10 \\+ \\\\text{pop}$$ causes overflow, then it must be that $$\\\\text{rev} \\\\geq \\\\frac{INTMAX}{10}$$\n2\\. If $$\\\\text{rev} \\> \\\\frac{INTMAX}{10}$$, then $$temp \\= \\\\text{rev} \\\\cdot 10 \\+ \\\\text{pop}$$ is guaranteed to overflow.\n3\\. If $$\\\\text{rev} \\=\\= \\\\frac{INTMAX}{10}$$, then $$temp \\= \\\\text{rev} \\\\cdot 10 \\+ \\\\text{pop}$$ will overflow if and only if $$\\\\text{pop} \\> 7$$\n\nSimilar logic can be applied when $$\\\\text{rev}$$ is negative.\n\n\n\n\\*\\*Complexity Analysis\\*\\*\n\n\\* Time Complexity: $$O(\\\\log(x))$$. There are roughly $$\\\\log\\_{10}(x)$$ digits in $$x$$.\n\\* Space Complexity: $$O(1\\)$$.",
  "approaches": [
    {
      "title": "Pop and Push Digits & Check before Overflow",
      "approach": "We can build up the reverse integer one digit at a time. While doing so, we can check beforehand whether or not appending another digit would cause overflow. Reversing an integer can be done similarly to reversing a string. We want to repeatedly \"pop\" the last digit off of x and \"push\" it to the back of the rev. In the end, rev will be the reverse of the x. To \"pop\" and \"push\" digits without the help of some auxiliary stack/array, we can use math. However, this approach is dangerous, because the statement temp = rev * 10 + pop can cause overflow. Luckily, it is easy to check beforehand whether or this statement would cause an overflow. If rev is positive, if temp = rev * 10 + pop causes overflow, then it must be that rev >= INTMAX/10. If rev > INTMAX/10, then temp = rev * 10 + pop is guaranteed to overflow. If rev == INTMAX/10, then temp = rev * 10 + pop will overflow if and only if pop > 7. Similar logic can be applied when rev is negative.",
      "analysis": "Time Complexity: O(log(x)). There are roughly log10(x) digits in x. Space Complexity: O(1)."
    }
  ]
}