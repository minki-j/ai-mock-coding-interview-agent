{
    "content": "<p>A <strong>permutation</strong> of an array of integers is an arrangement of its members into a sequence or linear order.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [1,2,3]</code>, the following are all the permutations of <code>arr</code>: <code>[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li>\n</ul>\n\n<p>The <strong>next permutation</strong> of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the <strong>next permutation</strong> of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p>\n\n<ul>\n\t<li>For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li>\n\t<li>Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li>\n\t<li>While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a lexicographical larger rearrangement.</li>\n</ul>\n\n<p>Given an array of integers <code>nums</code>, <em>find the next permutation of</em> <code>nums</code>.</p>\n\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a></strong> and use only constant extra memory.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,5]\n<strong>Output:</strong> [1,5,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
    "difficulty": "Medium",
    "title": "Next Permutation",
    "topicTags": [
        {
            "name": "Array"
        },
        {
            "name": "Two Pointers"
        }
    ],
    "solution": {
        "content": "[TOC]\n\n## Video Solution\n---\n\n<div class='video-preview'></div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n### Approach 1: Brute Force\n\n**Algorithm**\n\nIn this approach, we find out every possible permutation of list formed by the elements of the given array and find out the permutation which is\njust larger than the given one. But this one will be a very naive approach, since it requires us to find out every possible permutation\n which will take really long time and the implementation is complex.\n Thus, this approach is not acceptable at all. Hence, we move on directly to the correct approach.\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n!)$$. Total possible permutations is $$n!$$.\n* Space complexity : $$O(n)$$. Since an array will be used to store the permutations.\n<br />\n<br />\n\n---\n\n### Approach 2: Single Pass Approach\n\n**Algorithm**\n\nFirst, we observe that for any given sequence that is in descending order, no next larger permutation is possible.\n For example, no next permutation is possible for the following array:\n ```\n [9, 5, 4, 3, 1]\n ```\n\nWe need to find the first pair of two successive numbers $$a[i]$$ and $$a[i-1]$$, from the right, which satisfy\n $$a[i] > a[i-1]$$. Now, no rearrangements to the right of $$a[i-1]$$ can create a larger permutation since that subarray consists of numbers in descending order.\n Thus, we need to rearrange the numbers to the right of $$a[i-1]$$ including itself.\n\nNow, what kind of rearrangement will produce the next larger number? We want to create the permutation just larger than the current one. Therefore, we need to replace the number $$a[i-1]$$ with the number which is just larger than itself among the numbers lying to its right section, say $$a[j]$$.\n\n![ Next Permutation ](https://leetcode.com/media/original_images/31_nums_graph.png)\n\nWe swap the numbers $$a[i-1]$$ and $$a[j]$$. We now have the correct number at index $$i-1$$. But still the current permutation isn't the permutation\n    that we are looking for. We need the smallest permutation that can be formed by using the numbers only to the right of $$a[i-1]$$. Therefore, we need to place those\n     numbers in ascending order to get their smallest permutation.\n\nBut, recall that while scanning the numbers from the right, we simply kept decrementing the index\n      until we found the pair $$a[i]$$ and $$a[i-1]$$ where,  $$a[i] > a[i-1]$$. Thus, all numbers to the right of $$a[i-1]$$ were already sorted in descending order.\n      Furthermore, swapping $$a[i-1]$$ and $$a[j]$$ didn't change that order.\n      Therefore, we simply need to reverse the numbers following $$a[i-1]$$ to get the next smallest lexicographic permutation.\n\nThe following animation will make things clearer:\n\n![Next Permutation](https://leetcode.com/media/original_images/31_Next_Permutation.gif)\n\n<iframe src=\"\n```python3\nclass Solution:\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        i = len(nums) - 2\n        while i >= 0 and nums[i + 1] <= nums[i]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while nums[j] <= nums[i]:\n                j -= 1\n            self.swap(nums, i, j)\n        self.reverse(nums, i + 1)\n\n    def reverse(self, nums, start):\n        i, j = start, len(nums) - 1\n        while i < j:\n            self.swap(nums, i, j)\n            i += 1\n            j -= 1\n\n    def swap(self, nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n```\n\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Dm6PeACq\"></iframe>\n\n**Complexity Analysis**\n\nLet $n$ be the size of the `nums` array.\n\n- Time complexity: $O(n)$\n\n   The first `while` loop runs at most $n$ iterations, decrementing the variable `i` as it searches for the first decreasing element from the right. In the worst case, it checks all elements, so it takes $O(n)$ time.\n    \n   The second `while` loop also runs at most $n$ iterations, decrementing the variable `j` as it searches for the smallest element larger than `nums[i]`. Similarly, it can take $O(n)$ time.\n    \n   The `reverse` function is called on a portion of the array, from index `i + 1` to the end. In the worst case, this can cover the entire array, leading to a time complexity of $O(n)$.\n    \n   The `swap` function runs in constant time, $O(1)$, since it only exchanges two elements.\n    \n    Therefore, the overall time complexity is $O(n)$.\n\n- Space complexity: $O(1)$\n\n   The function operates in-place on the `nums` array, meaning no extra space is used for storing additional data.\n    \n   Only a few constant space variables (`i`, `j`, and `temp`) are used.\n    \n   The built-in `swap` and `reverse` functions do not require additional space beyond what is already present in the input array.\n\n    Hence, the space complexity is $O(1)$."
    },
    "code_snippets": [
        {
            "url": "https://leetcode.com/playground/Dm6PeACq/shared",
            "code": "class Solution:\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        i = len(nums) - 2\n        while i >= 0 and nums[i + 1] <= nums[i]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while nums[j] <= nums[i]:\n                j -= 1\n            self.swap(nums, i, j)\n        self.reverse(nums, i + 1)\n\n    def reverse(self, nums, start):\n        i, j = start, len(nums) - 1\n        while i < j:\n            self.swap(nums, i, j)\n            i += 1\n            j -= 1\n\n    def swap(self, nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp",
            "langSlug": "python3"
        }
    ],
    "content_md": "A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order.\n\n\n* For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`.\n\n\nThe **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n\n* For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`.\n* Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`.\n* While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement.\n\n\nGiven an array of integers `nums`, *find the next permutation of* `nums`.\n\n\nThe replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\n```\n\n**Example 3:**\n\n\n\n```\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 100`\n\n\n",
    "solution_md": "\\[TOC]\n\n\\#\\# Video Solution\n\\-\\-\\-\n\n\n\u00a0\n\n\n\\#\\# Solution Article\n\n\\-\\-\\-\n\n\\#\\#\\# Approach 1: Brute Force\n\n\\*\\*Algorithm\\*\\*\n\nIn this approach, we find out every possible permutation of list formed by the elements of the given array and find out the permutation which is\njust larger than the given one. But this one will be a very naive approach, since it requires us to find out every possible permutation\n which will take really long time and the implementation is complex.\n Thus, this approach is not acceptable at all. Hence, we move on directly to the correct approach.\n\n\\*\\*Complexity Analysis\\*\\*\n\n\\* Time complexity : $$O(n!)$$. Total possible permutations is $$n!$$.\n\\* Space complexity : $$O(n)$$. Since an array will be used to store the permutations.\n  \n\n  \n\n\n\\-\\-\\-\n\n\\#\\#\\# Approach 2: Single Pass Approach\n\n\\*\\*Algorithm\\*\\*\n\nFirst, we observe that for any given sequence that is in descending order, no next larger permutation is possible.\n For example, no next permutation is possible for the following array:\n \\`\\`\\`\n \\[9, 5, 4, 3, 1]\n \\`\\`\\`\n\nWe need to find the first pair of two successive numbers $$a\\[i]$$ and $$a\\[i\\-1]$$, from the right, which satisfy\n $$a\\[i] \\> a\\[i\\-1]$$. Now, no rearrangements to the right of $$a\\[i\\-1]$$ can create a larger permutation since that subarray consists of numbers in descending order.\n Thus, we need to rearrange the numbers to the right of $$a\\[i\\-1]$$ including itself.\n\nNow, what kind of rearrangement will produce the next larger number? We want to create the permutation just larger than the current one. Therefore, we need to replace the number $$a\\[i\\-1]$$ with the number which is just larger than itself among the numbers lying to its right section, say $$a\\[j]$$.\n\n!\\[ Next Permutation ](https://leetcode.com/media/original\\_images/31\\_nums\\_graph.png)\n\nWe swap the numbers $$a\\[i\\-1]$$ and $$a\\[j]$$. We now have the correct number at index $$i\\-1$$. But still the current permutation isn't the permutation\n that we are looking for. We need the smallest permutation that can be formed by using the numbers only to the right of $$a\\[i\\-1]$$. Therefore, we need to place those\n numbers in ascending order to get their smallest permutation.\n\nBut, recall that while scanning the numbers from the right, we simply kept decrementing the index\n until we found the pair $$a\\[i]$$ and $$a\\[i\\-1]$$ where, $$a\\[i] \\> a\\[i\\-1]$$. Thus, all numbers to the right of $$a\\[i\\-1]$$ were already sorted in descending order.\n Furthermore, swapping $$a\\[i\\-1]$$ and $$a\\[j]$$ didn't change that order.\n Therefore, we simply need to reverse the numbers following $$a\\[i\\-1]$$ to get the next smallest lexicographic permutation.\n\nThe following animation will make things clearer:\n\n!\\[Next Permutation](https://leetcode.com/media/original\\_images/31\\_Next\\_Permutation.gif)\n\n\\= 0 and nums\\[i \\+ 1] \\<\\= nums\\[i]:\n i \\-\\= 1\n if i \\>\\= 0:\n j \\= len(nums) \\- 1\n while nums\\[j] \\<\\= nums\\[i]:\n j \\-\\= 1\n self.swap(nums, i, j)\n self.reverse(nums, i \\+ 1\\)\n\n def reverse(self, nums, start):\n i, j \\= start, len(nums) \\- 1\n while i \\< j:\n self.swap(nums, i, j)\n i \\+\\= 1\n j \\-\\= 1\n\n def swap(self, nums, i, j):\n temp \\= nums\\[i]\n nums\\[i] \\= nums\\[j]\n nums\\[j] \\= temp\n\\`\\`\\`\n\" frameBorder\\=\"0\" width\\=\"100%\" height\\=\"500\" name\\=\"Dm6PeACq\"\\>\n\n\\*\\*Complexity Analysis\\*\\*\n\nLet $n$ be the size of the \\`nums\\` array.\n\n\\- Time complexity: $O(n)$\n\n The first \\`while\\` loop runs at most $n$ iterations, decrementing the variable \\`i\\` as it searches for the first decreasing element from the right. In the worst case, it checks all elements, so it takes $O(n)$ time.\n \n The second \\`while\\` loop also runs at most $n$ iterations, decrementing the variable \\`j\\` as it searches for the smallest element larger than \\`nums\\[i]\\`. Similarly, it can take $O(n)$ time.\n \n The \\`reverse\\` function is called on a portion of the array, from index \\`i \\+ 1\\` to the end. In the worst case, this can cover the entire array, leading to a time complexity of $O(n)$.\n \n The \\`swap\\` function runs in constant time, $O(1\\)$, since it only exchanges two elements.\n \n Therefore, the overall time complexity is $O(n)$.\n\n\\- Space complexity: $O(1\\)$\n\n The function operates in\\-place on the \\`nums\\` array, meaning no extra space is used for storing additional data.\n \n Only a few constant space variables (\\`i\\`, \\`j\\`, and \\`temp\\`) are used.\n \n The built\\-in \\`swap\\` and \\`reverse\\` functions do not require additional space beyond what is already present in the input array.\n\n Hence, the space complexity is $O(1\\)$.",
    "approaches": [
        {
            "title": "Brute Force",
            "approach": "In this approach, we find out every possible permutation of list formed by the elements of the given array and find out the permutation which is just larger than the given one. But this one will be a very naive approach, since it requires us to find out every possible permutation which will take really long time and the implementation is complex. Thus, this approach is not acceptable at all. Hence, we move on directly to the correct approach.",
            "analysis": {
                "time_complexity": "O(n!). Total possible permutations is n!.",
                "space_complexity": "O(n). Since an array will be used to store the permutations."
            }
        },
        {
            "title": "Single Pass Approach",
            "approach": "First, we observe that for any given sequence that is in descending order, no next larger permutation is possible. For example, no next permutation is possible for the following array: [9, 5, 4, 3, 1]. We need to find the first pair of two successive numbers a[i] and a[i-1], from the right, which satisfy a[i] > a[i-1]. Now, no rearrangements to the right of a[i-1] can create a larger permutation since that subarray consists of numbers in descending order. Thus, we need to rearrange the numbers to the right of a[i-1] including itself. Now, what kind of rearrangement will produce the next larger number? We want to create the permutation just larger than the current one. Therefore, we need to replace the number a[i-1] with the number which is just larger than itself among the numbers lying to its right section, say a[j]. We swap the numbers a[i-1] and a[j]. We now have the correct number at index i-1. But still the current permutation isn't the permutation that we are looking for. We need the smallest permutation that can be formed by using the numbers only to the right of a[i-1]. Therefore, we need to place those numbers in ascending order to get their smallest permutation. But, recall that while scanning the numbers from the right, we simply kept decrementing the index until we found the pair a[i] and a[i-1] where,  a[i] > a[i-1]. Thus, all numbers to the right of a[i-1] were already sorted in descending order. Furthermore, swapping a[i-1] and a[j] didn't change that order. Therefore, we simply need to reverse the numbers following a[i-1] to get the next smallest lexicographic permutation.",
            "analysis": {
                "time_complexity": "O(n). The first while loop runs at most n iterations, decrementing the variable i as it searches for the first decreasing element from the right. In the worst case, it checks all elements, so it takes O(n) time. The second while loop also runs at most n iterations, decrementing the variable j as it searches for the smallest element larger than nums[i]. Similarly, it can take O(n) time. The reverse function is called on a portion of the array, from index i + 1 to the end. In the worst case, this can cover the entire array, leading to a time complexity of O(n). The swap function runs in constant time, O(1), since it only exchanges two elements. Therefore, the overall time complexity is O(n).",
                "space_complexity": "O(1). The function operates in-place on the nums array, meaning no extra space is used for storing additional data. Only a few constant space variables (i, j, and temp) are used. The built-in swap and reverse functions do not require additional space beyond what is already present in the input array. Hence, the space complexity is O(1)."
            }
        }
    ],
    "prep_code": "from typing import List\n\n\nclass Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n",
    "test_code": "import unittest\n\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        nums = [1, 2, 3]\n        solution.nextPermutation(nums)\n        self.assertEqual(nums, [1, 3, 2])\n\n    def test_2(self):\n        solution = Solution()\n        nums = [3, 2, 1]\n        solution.nextPermutation(nums)\n        self.assertEqual(nums, [1, 2, 3])\n\n    def test_3(self):\n        solution = Solution()\n        nums = [1, 3, 2]\n        solution.nextPermutation(nums)\n        self.assertEqual(nums, [2, 1, 3])\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
}