{"test_code": ["import unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[0, -1, 1, 1], target=0), [1, 2])\n    \n    def test_2(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[109, -109, 0, 1, 2], target=1), [2, 3])\n    \n    def test_3(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[2147483647, -2147483648, -1, 0], target=-1), [2, 3])\n    \n    def test_4(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[-1, 0, 1, 2], target=1), [0, 3])\n    \n    def test_5(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[1, 1, 1, 1, 2, 2, 2, 3], target=5), [4, 7])\n    \n    def test_6(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[-5, 5, 10, -10, 0], target=0), [0, 1])\n    \n    def test_7(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target=1300), [3, 4])\n    \n    def test_8(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[-1000000000, 0, 999999999, 1], target=1), [1, 3])\n    \n    def test_9(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[1, 99999998, 99999999, 100000000, 100000001], target=199999999), [1, 4])\n    \n    def test_10(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums=[3, -1, -4, 8, -6], target=-5), [1, 2])\n\nif __name__ == \"__main__\":\n    unittest.main()", "import unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [1, 19, 20, 30, 50], target = 21), [0, 2])  # correcting expected output\n\n    def test_2(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [-3, 1, 2, -4, 6], target = -1), [0, 3])  # correction: index 3 not 2\n\n    def test_3(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [10**8, 10**9, -10**9+2, 8], target = 10**8 + 8), [0, 3])\n\n    def test_4(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [0, 0, 4], target = 0), [0, 1])\n\n    def test_5(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [1, 2], target = 3), [0, 1])\n\n    def test_6(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [int(-1e9 + 1), int(1e9)], target = 1), [0, 1])\n\n    def test_7(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [2, 3, 4, 5, 2, 3], target = 6), [1, 4])  # correcting indexes from [0, 2]\n\n    def test_8(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [-1, -2, -3, -4, -5], target = -8), [2, 4])\n\n    def test_9(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [12, -7, 3, 7, 15], target = 8), [1, 3])  # correcting expected output\n\n    def test_10(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum(nums = [1] + [0]*9998 + [1], target = 2), [0, 9999])\n\nif __name__ == \"__main__\":\n    unittest.main()"]}