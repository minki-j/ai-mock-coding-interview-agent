{"test_code": {"unit_test": "import unittest\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]\n        # Return an empty list if no solution is found\n        return []\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [2, 7, 11, 15], target = 9), [0, 1])\n\n    def test_2(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [3, 2, 4], target = 6), [1, 2])\n\n    def test_3(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [3, 3], target = 6), [0, 1])\n\n    def test_4(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [0, 4, 3, 0], target = 0), [0, 3])\n\n    def test_5(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [-1, -2, -3, -4, -5], target = -8), [2, 4])\n\n    def test_6(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [1, 2, 3, 4, 5], target = 5), [0, 3])\n\n    def test_7(self):\n        solution = Solution()\n        self.assertListEqual(solution.twoSum(nums = [], target = 1), [])\n\n    def test_8(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [5, 75, 25], target = 100), [1, 2])\n\n    def test_9(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [1, 3, 7, 2, 9], target = 11), [2, 4])\n\n    def test_10(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [2, 5, 5, 11], target = 10), [1, 2])\n\n    def test_11(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [2, 1, 5, 3, 4], target = 7), [2, 3])\n\n    def test_12(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [4, 6, 1, -2, 5], target = 4), [1, 3])\n\n    def test_13(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [-10, 7, 19, 15, -5], target = 9), [1, 4])\n\n    def test_14(self):\n        solution = Solution()\n        self.assertListEqual(solution.twoSum(nums = [1], target = 2), [])\n\n    def test_15(self):\n        solution = Solution()\n        self.assertListEqual(solution.twoSum(nums = [0, 0], target = 1), [])\n    \n    def test_16(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [9, -2, 3, -7, 4], target = 7), [0, 3])\n\n    def test_17(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [-1, -2, 3, 8, 6], target = 2), [1, 4])\n\n    def test_18(self):\n        solution = Solution()\n        self.assertCountEqual(solution.twoSum(nums = [0, 0, 0], target = 0), [0, 1])\n\nif __name__ == \"__main__\":\n    unittest.main()"}}